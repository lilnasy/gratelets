From c254a7018d5d40893f3a5b22d72b054a9aa797dc Mon Sep 17 00:00:00 2001
From: Arsh <69170106+lilnasy@users.noreply.github.com>
Date: Fri, 20 Dec 2024 03:36:55 +0530
Subject: [PATCH 2/3] use implementation

---
 package/src/index.ts        |  89 +++++++++++++++++++++++++++++--
 package/src/server/index.ts | 101 ++++++++++++++++++++++++++++++++++--
 package/src/types.ts        |   2 +-
 package/tsconfig.json       |   2 +-
 4 files changed, 183 insertions(+), 11 deletions(-)

diff --git a/package/src/index.ts b/package/src/index.ts
index 7def9a0..1f9063b 100644
--- a/package/src/index.ts
+++ b/package/src/index.ts
@@ -7,6 +7,55 @@ import { OptionsSchema } from '~/validators';
 import type { AstroAdapter, AstroIntegration } from 'astro';
 
 import type { Options } from '~/types.ts';
+import { handleUpgradeRequests, type ViteDevServer } from "./websocket/dev-middleware.ts"
+
+export interface Locals {
+  /**
+   * Whether the current request wants the connection to be upgraded
+   * to a WebSocket.
+   */
+  isUpgradeRequest: boolean
+  /**
+   * Upgrade an incoming HTTP request to a bidirectional WebSocket
+   * connection.
+   *
+   * Returns a pair of {@linkcode WebSocket} and {@linkcode Response}
+   * instances. The request must be responded to with the provided
+   * response for the provided WebSocket to open and start receiving
+   * messages from the browser.
+   *
+   * ```ts
+   * export const GET: APIRoute = ctx => {
+   *     if (ctx.locals.isUpgradeRequest) {
+   *         const { response, socket } = ctx.locals.upgradeWebSocket()
+   *         socket.onmessage = event => {
+   *             if (event.data === "ping") {
+   *                 socket.send("pong")
+   *             }
+   *         }
+   *         return response
+   *     }
+   *     return new Response("Upgrade required", { status: 426 })
+   * }
+   * ```
+   *
+   * Calling this function on its own does not connect the WebSocket.
+   * It only returns a pair of objects that will establish the connection
+   * once the generated response has been returned from the API Route.
+   *
+   * Throws if the request is not an upgrade request.
+   */
+  upgradeWebSocket(): { socket: WebSocket, response: Response };
+}
+
+interface Locals_ extends Locals {}
+
+declare global {
+  namespace App {
+    export interface Locals extends Locals_ {}
+  }
+}
+
 
 export function getAdapter(args: Options = {}): AstroAdapter {
   return {
@@ -17,8 +66,8 @@ export function getAdapter(args: Options = {}): AstroAdapter {
       CreateExports.START,
       CreateExports.STOP,
     ] satisfies Array<(typeof CreateExports)[keyof typeof CreateExports]>,
-    name: packageName,
-    serverEntrypoint: `${packageName}/server.js`,
+    name: "astro-bun-websocket",
+    serverEntrypoint: new URL("./server/index.ts", import.meta.url),
     supportedAstroFeatures: {
       envGetSecret: 'experimental',
       hybridOutput: 'deprecated',
@@ -36,14 +85,40 @@ export default function integration(options?: Options): AstroIntegration {
   const parsedOptions = OptionsSchema.optional().safeParse(options);
   if (!parsedOptions.success)
     throw new AstroError(
-      `Invalid options passed to "${packageName}" integration\n`,
+      `Invalid options passed to "astro-bun-websocket" integration\n`,
       parsedOptions.error.issues.map((i) => i.message).join('\n'),
     );
 
+  let viteDevServer: ViteDevServer;
+  
   return {
-    name: packageName,
+    name: "astro-bun-websocket",
     hooks: {
       // biome-ignore lint/nursery/useExplicitType: Parent inferred type.
+      'astro:config:setup': ({ addMiddleware, command, updateConfig }) => {
+        updateConfig({
+          vite: {
+            ssr: {
+              noExternal: ["astro-bun-websocket"]
+            },
+            esbuild: {
+              tsconfigRaw: {
+                compilerOptions: {
+                  // make the compilation of classes
+                  // compatable with standard ES6
+                  useDefineForClassFields: true,
+                },
+              }
+            },
+          }
+        })
+        if (command === "dev") {
+          addMiddleware({
+            order: "pre",
+            entrypoint: new URL("./websocket/dev-middleware.ts", import.meta.url)
+          })
+        }
+      },
       'astro:config:done': (params) => {
         params.setAdapter(
           getAdapter({
@@ -56,6 +131,12 @@ export default function integration(options?: Options): AstroIntegration {
           }),
         );
       },
+      'astro:server:setup' ({ server }) {
+        viteDevServer = server
+      },
+      'astro:server:start' () {
+        handleUpgradeRequests(viteDevServer)
+      }
     },
   };
 }
diff --git a/package/src/server/index.ts b/package/src/server/index.ts
index 60c780b..6001366 100644
--- a/package/src/server/index.ts
+++ b/package/src/server/index.ts
@@ -7,10 +7,15 @@ import { App } from 'astro/app';
 
 import { extractHostname, serveStaticFile } from '~/server/utils';
 
+import { UpgradeResponse } from "../websocket/response.ts"
+import { WebSocket } from "../websocket/bun-websocket.ts"
+import { attach } from "../websocket/bun-attach.ts"
+
 import type { SSRManifest } from 'astro';
 import type { Server } from 'bun';
 
-import type { CreateExports, Options } from '~/types';
+import type { CreateExports, Options } from '~/types.ts';
+import type { Locals } from "../index.ts"
 
 export function createExports(manifest: SSRManifest, options: Options): CreateExports {
   return {
@@ -45,7 +50,6 @@ export function start(manifest: SSRManifest, options: Options): void {
   } else {
     const app = new App(manifest);
     const logger = app.getAdapterLogger();
-
     const tlsCertPath = env.TLS_CERT_PATH ?? options.tls?.certPath ?? null;
     const tlsKeyPath = env.TLS_KEY_PATH ?? options.tls?.keyPath ?? null;
 
@@ -62,6 +66,62 @@ export function start(manifest: SSRManifest, options: Options): void {
         cert: tlsCertPath ? Bun.file(tlsCertPath) : undefined,
         key: tlsKeyPath ? Bun.file(tlsKeyPath) : undefined,
       },
+      websocket: {
+        open(sws) {
+          if (sws.data.binaryType === "arraybuffer") {
+            sws.binaryType = "arraybuffer"
+          } else if (sws.data.binaryType === "blob") {
+            /**
+             * bun does not support "blob" binary type
+             * https://github.com/oven-sh/bun/issues/8721
+             * 
+             * Instead, it can provide either arraybuffer or
+             * nodebuffer objects, which we will manually
+             * convert into blobs.
+             */
+            // sws.binaryType = "blob"
+          } else if (sws.data.binaryType === "uint8array") {
+            sws.binaryType = "uint8array"
+          }
+          attach(sws.data, sws)
+          const event = new Event("open")
+          sws.data.onopen?.(event)
+          sws.data.dispatchEvent(event)
+        },
+        message(sws, message) {
+          const wantedType =
+            sws.data.binaryType === "blob" ? "blob"
+            : sws.data.binaryType === "nodebuffer" ? "nodebuffer"
+            : "arraybuffer"
+
+          let data
+
+          if (typeof message === "string") {
+            data = message
+          } else if (wantedType === "arraybuffer") {
+            if (message instanceof ArrayBuffer) {
+              data = message
+            } else {
+              data = (message as import("node:buffer").Buffer).buffer
+            }
+          } else if (wantedType === "blob") {
+            if (message instanceof Blob) {
+              data = message
+            } else {
+              data = new Blob([ message as ArrayBuffer | import("node:buffer").Buffer ])
+            }
+          }
+
+          const event = new MessageEvent("message", { data })
+          sws.data.onmessage?.(event)
+          sws.data.dispatchEvent(event)
+        },
+        close(sws, code, reason) {
+          const event = new CloseEvent("close", { code, reason })
+          sws.data.onclose?.(event)
+          sws.data.dispatchEvent(event)
+        },
+      },
     });
 
     function exit(): void {
@@ -80,12 +140,12 @@ export function start(manifest: SSRManifest, options: Options): void {
 function handler(
   manifest: SSRManifest,
   options: Options,
-): (req: Request, server: Server) => Promise<Response> {
+): (req: Request, server: Server) => Promise<Response | undefined> {
   const clientRoot = options.client ?? new URL('../client/', import.meta.url).href;
 
   const app = new App(manifest);
 
-  return (req: Request, server: Server): Promise<Response> => {
+  return async (req: Request, server: Server): Promise<Response> => {
     const routeData = app.match(req);
     if (!routeData) {
       const url = new URL(req.url);
@@ -109,10 +169,41 @@ function handler(
       }
     }
 
-    return app.render(req, {
+    const response = await app.render(req, {
       addCookieHeader: true,
       clientAddress: server.requestIP(req)?.address,
       routeData,
+      locals: {
+        get isUpgradeRequest() {
+          return req.headers.get("upgrade") === "websocket"
+        },
+        upgradeWebSocket() {
+          const response = new UpgradeResponse
+          const socket = new WebSocket
+          responseToSocketMap.set(response, socket)
+          return { response, socket }
+        }
+      } satisfies Locals
     });
+    if (response instanceof UpgradeResponse) {
+      const socket = responseToSocketMap.get(response)!
+      const success = server.upgrade<WebSocket>(req, { data: socket })
+      if (!success) {
+        throw new Error("The request must be an upgrade request to upgrade the connection to a WebSocket.")
+      }
+      return undefined
+    }
+    return response
   };
 }
+
+/**
+ * The websocket instance is created as soon as
+ * `locals.upgradeWebSocket()` is called. It gets
+ * attached to an actual connection once the app
+ * code returns a response.
+ *
+ * This map is used to keep track of the
+ * responses' associated websocket instance.
+ */
+const responseToSocketMap = new WeakMap<Response, WebSocket>
\ No newline at end of file
diff --git a/package/src/types.ts b/package/src/types.ts
index bf697d3..6b69d09 100644
--- a/package/src/types.ts
+++ b/package/src/types.ts
@@ -11,7 +11,7 @@ export const CreateExports = {
 } as const;
 
 export type CreateExports = {
-  [CreateExports.HANDLE]: (req: Request, server: Server) => Promise<Response>;
+  [CreateExports.HANDLE]: (req: Request, server: Server) => Promise<Response | undefined>;
   [CreateExports.RUNNING]: () => boolean;
   [CreateExports.START]: () => void;
   [CreateExports.STOP]: () => void;
diff --git a/package/tsconfig.json b/package/tsconfig.json
index 68e7f88..1d504c9 100644
--- a/package/tsconfig.json
+++ b/package/tsconfig.json
@@ -1,7 +1,7 @@
 {
   "compilerOptions": {
     // Enable latest features
-    "lib": ["ESNext", "DOM"],
+    "lib": ["ESNext", "DOM", "DOM.Iterable", "DOM.AsyncIterable"],
     "target": "ESNext",
     "module": "ESNext",
     "moduleDetection": "force",
-- 
2.47.0.windows.2

