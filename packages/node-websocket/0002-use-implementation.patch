From 8576e25f45de7ae09a3397a9f06415bcc5e1f23a Mon Sep 17 00:00:00 2001
From: Arsh <69170106+lilnasy@users.noreply.github.com>
Date: Thu, 12 Dec 2024 19:02:43 +0530
Subject: [PATCH 2/3] use implementation

---
 packages/integrations/node/src/index.ts      | 77 ++++++++++++++++++--
 packages/integrations/node/src/serve-app.ts  | 13 +++-
 packages/integrations/node/src/standalone.ts |  2 +
 packages/integrations/node/src/types.ts      |  2 +-
 4 files changed, 85 insertions(+), 9 deletions(-)

diff --git a/packages/integrations/node/src/index.ts b/packages/integrations/node/src/index.ts
index 2a99e383bf..e04e834650 100644
--- a/packages/integrations/node/src/index.ts
+++ b/packages/integrations/node/src/index.ts
@@ -10,12 +10,55 @@ import type {
 import { AstroError } from 'astro/errors';
 import { STATIC_HEADERS_FILE } from './shared.js';
 import type { Options, UserOptions } from './types.js';
+import { handleUpgradeRequests, type ViteDevServer } from "./websocket/dev-middleware.js"
+
+export interface Locals {
+    /**
+     * Upgrade an incoming HTTP request to a bidirectional WebSocket
+     * connection.
+     *
+     * Returns a pair of {@linkcode WebSocket} and {@linkcode Response}
+     * instances. The request must be responded to with the provided
+     * response for the provided WebSocket to open and start receiving
+     * messages from the browser.
+     *
+     * ```ts
+     * export const GET: APIRoute = ctx => {
+     *     if (ctx.request.headers.get("upgrade") === "websocket") {
+     *         const { response, socket } = ctx.locals.upgradeWebSocket()
+     *         socket.onmessage = event => {
+     *             if (event.data === "ping") {
+     *                 socket.send("pong")
+     *             }
+     *         }
+     *         return response
+     *     }
+     *     return new Response("Upgrade required", { status: 426 })
+     * }
+     * ```
+     *
+     * Calling this function on its own does not connect the WebSocket.
+     * It only returns a pair of objects that will establish the connection
+     * once the generated response has been returned from the API Route.
+     *
+     * Throws if the request is not an upgrade request.
+     */
+    upgradeWebSocket(): { socket: WebSocket, response: Response };
+}
+
+interface NodeLocals extends Locals {}
+
+declare global {
+	namespace App {
+		export interface Locals extends NodeLocals {}
+	}
+}
 
 export function getAdapter(options: Options): AstroAdapter {
 	return {
-		name: '@astrojs/node',
-		serverEntrypoint: '@astrojs/node/server.js',
-		previewEntrypoint: '@astrojs/node/preview.js',
+		name: "astro-node-websocket",
+		serverEntrypoint: new URL("./server.ts", import.meta.url),
+		previewEntrypoint: new URL("./preview.ts", import.meta.url),
 		exports: ['handler', 'startServer', 'options'],
 		args: options,
 		adapterFeatures: {
@@ -54,10 +97,11 @@ export default function createIntegration(userOptions: UserOptions): AstroIntegr
 	let _options: Options;
 	let _config: AstroConfig | undefined = undefined;
 	let _routeToHeaders: RouteToHeaders | undefined = undefined;
+	let viteDevServer: ViteDevServer;
 	return {
-		name: '@astrojs/node',
+		name: "astro-node-websocket",
 		hooks: {
-			'astro:config:setup': async ({ updateConfig, config, logger }) => {
+			'astro:config:setup': async ({ addMiddleware, command, updateConfig, config, logger }) => {
 				let session = config.session;
 				_config = config;
 				if (!session?.driver) {
@@ -81,10 +125,25 @@ export default function createIntegration(userOptions: UserOptions): AstroIntegr
 					session,
 					vite: {
 						ssr: {
-							noExternal: ['@astrojs/node'],
+							noExternal: ["astro-node-websocket"],
+						},
+						esbuild: {
+							tsconfigRaw: {
+								compilerOptions: {
+									// make the compilation of classes
+									// compatable with standard ES6
+									useDefineForClassFields: true,
+								},
+							}
 						},
 					},
 				});
+				if (command === "dev") {
+					addMiddleware({
+						order: "pre",
+						entrypoint: new URL("./websocket/dev-middleware.ts", import.meta.url)
+					})
+				}
 			},
 			'astro:build:generated': ({ experimentalRouteToHeaders }) => {
 				_routeToHeaders = experimentalRouteToHeaders;
@@ -102,6 +161,12 @@ export default function createIntegration(userOptions: UserOptions): AstroIntegr
 				};
 				setAdapter(getAdapter(_options));
 			},
+			'astro:server:setup' ({ server }) {
+				viteDevServer = server
+			},
+			'astro:server:start' () {
+				handleUpgradeRequests(viteDevServer)
+			},
 			'astro:build:done': async () => {
 				if (!_config) {
 					return;
diff --git a/packages/integrations/node/src/serve-app.ts b/packages/integrations/node/src/serve-app.ts
index 09473e50cc..88b2aebb9a 100644
--- a/packages/integrations/node/src/serve-app.ts
+++ b/packages/integrations/node/src/serve-app.ts
@@ -33,7 +33,7 @@ export function createAppHandler(app: NodeApp, options: Options): RequestHandler
 			}
 		: undefined;
 
-	return async (req, res, next, locals) => {
+	return async (req, res, next, locals = {}) => {
 		let request: Request;
 		try {
 			request = NodeApp.createRequest(req);
@@ -44,7 +44,16 @@ export function createAppHandler(app: NodeApp, options: Options): RequestHandler
 			res.end('Internal Server Error');
 			return;
 		}
-
+		/**
+		 * An upgrade request will be handled by a listener attached to the `upgrade` event,
+		 * which is the returned function from createWebsocketHandler().
+		 *
+		 * The fact that a request is being handled by this function, a listener for the
+		 * `request` event, means that the request was not an upgrade request.
+		 */
+		locals.upgradeWebSocket = () => {
+			throw new Error("The request must be an upgrade request to upgrade the connection to a WebSocket.")
+		}
 		const routeData = app.match(request);
 		if (routeData) {
 			const response = await als.run(request.url, () =>
diff --git a/packages/integrations/node/src/standalone.ts b/packages/integrations/node/src/standalone.ts
index 22587e1a54..804727ffbe 100644
--- a/packages/integrations/node/src/standalone.ts
+++ b/packages/integrations/node/src/standalone.ts
@@ -7,6 +7,7 @@ import enableDestroy from 'server-destroy';
 import { logListeningOn } from './log-listening-on.js';
 import { createAppHandler } from './serve-app.js';
 import { createStaticHandler } from './serve-static.js';
+import { createWebsocketHandler } from "./websocket/serve-websocket.js"
 import type { Options } from './types.js';
 
 // Used to get Host Value at Runtime
@@ -22,6 +23,7 @@ export default function standalone(app: NodeApp, options: Options) {
 	const host = process.env.HOST ?? hostOptions(options.host);
 	const handler = createStandaloneHandler(app, options);
 	const server = createServer(handler, host, port);
+	server.server.on("upgrade", createWebsocketHandler(app))
 	server.server.listen(port, host);
 	if (process.env.ASTRO_NODE_LOGGING !== 'disabled') {
 		logListeningOn(app.getAdapterLogger(), server.server, host);
diff --git a/packages/integrations/node/src/types.ts b/packages/integrations/node/src/types.ts
index 4a318bdeda..a627b0edfb 100644
--- a/packages/integrations/node/src/types.ts
+++ b/packages/integrations/node/src/types.ts
@@ -47,5 +47,5 @@ type RequestHandlerParams = [
 	req: IncomingMessage,
 	res: ServerResponse,
 	next?: (err?: unknown) => void,
-	locals?: object,
+	locals?: { [key: string]: any },
 ];
-- 
2.50.1

